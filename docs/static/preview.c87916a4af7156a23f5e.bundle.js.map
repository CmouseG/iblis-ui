{"version":3,"file":"static/preview.c87916a4af7156a23f5e.bundle.js","sources":["webpack:///./src/components/form_components/managed_simple_add_form/index.tsx"],"sourcesContent":["import { Grid, WithTheme, withTheme } from '@material-ui/core';\nimport { IblisButton, IblisTextField } from '@src/components';\nimport * as React from 'react';\nimport { Field, InjectedFormProps } from 'redux-form';\nimport { style } from './style';\n\nexport interface ManagedAddSimpleFormValues {\n    /**\n     * The value of the field in the form\n     */\n    entityName?: string;\n}\n\nexport interface ManagedAddSimpleFormProps {\n    /**\n     * The placeholder label for the entityName field\n     */\n    namePlaceHolder: string;\n    /**\n     * The button label to launch main action\n     */\n    buttonLabelAdd: string;\n    /**\n     * To show to user that the action is loading\n     * @default false\n     */\n    isLoading?: boolean;\n    /**\n     * To show error if validation function is not satisfied\n     */\n    validateFunctions: Array<(value: string, allValues: ManagedAddSimpleFormValues, props: ManagedAddSimpleFormProps) => string | undefined>;\n    /**\n     * The Function to call to add new entity\n     */\n    addAction(values: ManagedAddSimpleFormValues): void;\n}\n\nconst ManagedAddSimpleFormBase:\n    React.StatelessComponent<ManagedAddSimpleFormProps & InjectedFormProps<ManagedAddSimpleFormValues, ManagedAddSimpleFormProps> & WithTheme> = (props) => {\n\n        const { namePlaceHolder, buttonLabelAdd, isLoading = false, validateFunctions, addAction, handleSubmit, submitting, reset, theme } = props;\n\n        const submitForm = (values: ManagedAddSimpleFormValues) => {\n            addAction(values);\n            reset();\n        };\n\n        return (\n            <div>\n                <form\n                    onSubmit={handleSubmit(submitForm)}\n                    noValidate={true}\n                >\n                    <Grid container={true} >\n                        {/* name */}\n                        <Grid item={true} xs={8} style={style(theme).fieldContainer}>\n                            <Field\n                                type=\"text\"\n                                name=\"entityName\"\n                                component={IblisTextField}\n                                disabled={submitting || isLoading}\n                                validate={validateFunctions}\n                                required={true}\n                                placeholder={namePlaceHolder}\n                                fullWidth={true}\n                            />\n                        </Grid>\n                        {/* button */}\n                        <Grid item={true} >\n                            <IblisButton\n                                buttonType=\"default\"\n                                buttonLabel={buttonLabelAdd}\n                                type=\"submit\"\n                                isLoading={submitting || isLoading}\n                            />\n                        </Grid>\n                    </Grid>\n                </form>\n            </div >\n        );\n    };\n\nconst ManagedAddSimpleFormWithTheme: React.ComponentClass<ManagedAddSimpleFormProps & InjectedFormProps<ManagedAddSimpleFormValues, ManagedAddSimpleFormProps>> =\n    withTheme()(ManagedAddSimpleFormBase);\n\n/**\n * Simple form with only one value to add\n */\nexport const ManagedAddSimpleForm: React.ComponentClass<ManagedAddSimpleFormProps & InjectedFormProps<ManagedAddSimpleFormValues, ManagedAddSimpleFormProps>> =\n    (ManagedAddSimpleFormWithTheme);\ntry {\n    // @ts-ignore\n    ManagedAddSimpleForm.displayName = \"ManagedAddSimpleForm\";\n    // @ts-ignore\n    ManagedAddSimpleForm.__docgenInfo = { \"description\": \"Simple form with only one value to add\", \"displayName\": \"ManagedAddSimpleForm\", \"props\": { \"namePlaceHolder\": { \"defaultValue\": null, \"description\": \"The placeholder label for the entityName field\", \"name\": \"namePlaceHolder\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"buttonLabelAdd\": { \"defaultValue\": null, \"description\": \"The button label to launch main action\", \"name\": \"buttonLabelAdd\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"isLoading\": { \"defaultValue\": { value: \"false\" }, \"description\": \"To show to user that the action is loading\", \"name\": \"isLoading\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"validateFunctions\": { \"defaultValue\": null, \"description\": \"To show error if validation function is not satisfied\", \"name\": \"validateFunctions\", \"required\": true, \"type\": { \"name\": \"((value: string, allValues: ManagedAddSimpleFormValues, props: ManagedAddSimpleFormProps) => stri...\" } }, \"addAction\": { \"defaultValue\": null, \"description\": \"The Function to call to add new entity\", \"name\": \"addAction\", \"required\": true, \"type\": { \"name\": \"(values: ManagedAddSimpleFormValues) => void\" } }, \"anyTouched\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"anyTouched\", \"required\": true, \"type\": { \"name\": \"boolean\" } }, \"array\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"array\", \"required\": true, \"type\": { \"name\": \"InjectedArrayProps\" } }, \"asyncValidate\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"asyncValidate\", \"required\": true, \"type\": { \"name\": \"() => void\" } }, \"asyncValidating\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"asyncValidating\", \"required\": true, \"type\": { \"name\": \"string | boolean\" } }, \"autofill\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"autofill\", \"required\": true, \"type\": { \"name\": \"(field: string, value: any) => void\" } }, \"blur\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"blur\", \"required\": true, \"type\": { \"name\": \"(field: string, value: any) => void\" } }, \"change\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"change\", \"required\": true, \"type\": { \"name\": \"(field: string, value: any) => void\" } }, \"clearAsyncError\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"clearAsyncError\", \"required\": true, \"type\": { \"name\": \"(field: string) => void\" } }, \"destroy\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"destroy\", \"required\": true, \"type\": { \"name\": \"() => void\" } }, \"dirty\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"dirty\", \"required\": true, \"type\": { \"name\": \"boolean\" } }, \"error\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"error\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"form\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"form\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"handleSubmit\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"handleSubmit\", \"required\": true, \"type\": { \"name\": \"SubmitHandler<ManagedAddSimpleFormValues, ManagedAddSimpleFormProps>\" } }, \"initialize\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"initialize\", \"required\": true, \"type\": { \"name\": \"(data: Partial<ManagedAddSimpleFormValues>) => void\" } }, \"initialized\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"initialized\", \"required\": true, \"type\": { \"name\": \"boolean\" } }, \"initialValues\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"initialValues\", \"required\": true, \"type\": { \"name\": \"Partial<ManagedAddSimpleFormValues>\" } }, \"invalid\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"invalid\", \"required\": true, \"type\": { \"name\": \"boolean\" } }, \"pristine\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"pristine\", \"required\": true, \"type\": { \"name\": \"boolean\" } }, \"reset\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"reset\", \"required\": true, \"type\": { \"name\": \"() => void\" } }, \"submitFailed\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"submitFailed\", \"required\": true, \"type\": { \"name\": \"boolean\" } }, \"submitSucceeded\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"submitSucceeded\", \"required\": true, \"type\": { \"name\": \"boolean\" } }, \"submitting\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"submitting\", \"required\": true, \"type\": { \"name\": \"boolean\" } }, \"touch\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"touch\", \"required\": true, \"type\": { \"name\": \"(...field: string[]) => void\" } }, \"untouch\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"untouch\", \"required\": true, \"type\": { \"name\": \"(...field: string[]) => void\" } }, \"valid\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"valid\", \"required\": true, \"type\": { \"name\": \"boolean\" } }, \"warning\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"warning\", \"required\": true, \"type\": { \"name\": \"any\" } }, \"registeredFields\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"registeredFields\", \"required\": true, \"type\": { \"name\": \"{ [name: string]: RegisteredField; }\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/form_components/managed_simple_add_form/index.tsx#ManagedAddSimpleForm\"] = { docgenInfo: ManagedAddSimpleForm.__docgenInfo, name: \"ManagedAddSimpleForm\", path: \"src/components/form_components/managed_simple_add_form/index.tsx#ManagedAddSimpleForm\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"mappings":"AAAA","sourceRoot":""}